use crate::ast::*;
use crate::ast::Opcode::*;
use crate::gen_instruction;

grammar;

Integer: u8 = r"(-)?[0-9]+" => <>.parse().unwrap();
Label: String = r"\.([a-z]|[A-Z]|[0-9]|_|-)*" => <>.to_string();
Register: u8 = r"(R|r)" <int: Integer> => int;

AnyOp: Operand = {
    Integer => Operand::Immediate(<>),
    Register => Operand::Register(<>),
    Label => Operand::Label(<>)
};
RegOp: Operand = {
    Register => Operand::Register(<>)
};
LabelOp: Operand = {
    Label => Operand::Label(<>)
};

Instr: Instruction = {
    r"hlt|HLT" => gen_instruction!(Hlt),
    r"mov|MOV" <dst: RegOp> "," <src: AnyOp> => gen_instruction!(Mov; dst, src),
    r"add|ADD" <dst: RegOp> "," <op1: AnyOp> "," <op2: AnyOp> => gen_instruction!(Add; dst, op1, op2),
    r"sub|SUB" <dst: RegOp> "," <op1: AnyOp> "," <op2: AnyOp> => gen_instruction!(Sub; dst, op1, op2),
    r"mul|MUL" <dst: RegOp> "," <op1: AnyOp> "," <op2: AnyOp> => gen_instruction!(Mul; dst, op1, op2),
    r"and|AND" <dst: RegOp> "," <op1: AnyOp> "," <op2: AnyOp> => gen_instruction!(And; dst, op1, op2),
    r"or|OR"   <dst: RegOp> "," <op1: AnyOp> "," <op2: AnyOp> => gen_instruction!(Or; dst, op1, op2),
    r"xor|XOR" <dst: RegOp> "," <op1: AnyOp> "," <op2: AnyOp> => gen_instruction!(Xor; dst, op1, op2),
    r"div|DIV" <dst: RegOp> "," <op1: AnyOp> "," <op2: AnyOp> => gen_instruction!(Div; dst, op1, op2),
    r"mod|MOD" <dst: RegOp> "," <op1: AnyOp> "," <op2: AnyOp> => gen_instruction!(Mod; dst, op1, op2),
    r"not|NOT" <dst: RegOp> "," <op1: AnyOp> => gen_instruction!(Not; dst, op1),
    r"cmp|CMP" <op1: AnyOp> "," <op2: AnyOp> => gen_instruction!(Cmp; op1, op2),
    r"jgr|JGR" <dst: LabelOp> => gen_instruction!(Jgr; dst),
    r"jlt|JLT" <dst: LabelOp> => gen_instruction!(Jlt; dst),
    r"jge|JGE" <dst: LabelOp> => gen_instruction!(Jge; dst),
    r"jle|JLE" <dst: LabelOp> => gen_instruction!(Jle; dst),
    r"jeq|JEQ" <dst: LabelOp> => gen_instruction!(Jeq; dst),
    r"jnq|JNQ" <dst: LabelOp> => gen_instruction!(Jnq; dst),
    r"jmp|JMP" <dst: LabelOp> => gen_instruction!(Jmp; dst),
    r"cal|CAL" <dst: LabelOp> => gen_instruction!(Cal; dst),
    r"ret|RET" => gen_instruction!(Ret),
    r"psh|PSH" <src: AnyOp> => gen_instruction!(Psh; src),
    r"pop|POP" <dst: RegOp> => gen_instruction!(Pop; dst),
    r"lod|LOD" <dst: RegOp> "," <src: AnyOp> => gen_instruction!(Lod; dst, src),
    r"str|STR" <dst: AnyOp> "," <src: AnyOp> => gen_instruction!(Str; dst, src),
    r"rsh|RSH" <dst: RegOp> "," <src: AnyOp> => gen_instruction!(Rsh; dst, src),
    r"lsh|LSH" <dst: RegOp> "," <src: AnyOp> => gen_instruction!(Lsh; dst, src),
    r"pst|PST" <dst: AnyOp> "," <src: AnyOp> => gen_instruction!(Pst; dst, src),
    r"pld|PLD" <dst: RegOp> "," <src: AnyOp> => gen_instruction!(Pld; dst, src),
};
pub AsmMember: AsmLine = {
    Instr => AsmLine::Instruction(<>),
    Label => AsmLine::Label(<>),
};
pub Asm: Vec<AsmLine> = AsmMember* => <>;